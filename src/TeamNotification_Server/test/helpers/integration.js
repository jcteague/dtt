// Generated by CoffeeScript 1.3.3
(function() {
  var Q, clean_up_db, create_db_tables, creation_promise, db_config, gateway, insert_entity, pg_gateway, relate, set_up_db, sync, _entity,
    __slice = [].slice;

  db_config = require('../../support/globals').db;

  gateway = require('../../support/orm_gateway');

  pg_gateway = require('../../support/database/pg_gateway');

  Q = require('q');

  creation_promise = null;

  _entity = {};

  create_db_tables = function(entities_schema) {
    return gateway.open(db_config.test).then(function(db) {
      var entity, entity_name, relation, values, _i, _len, _ref, _results;
      for (entity_name in entities_schema) {
        values = entities_schema[entity_name];
        if (entity_name === 'relations') {
          continue;
        }
        _entity[entity_name] = db.define(values.table, values.columns);
      }
      if (entities_schema.relations) {
        _ref = entities_schema.relations;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          relation = _ref[_i];
          relate(relation);
        }
      }
      _results = [];
      for (entity in _entity) {
        values = _entity[entity];
        _results.push(sync(entity));
      }
      return _results;
    });
  };

  relate = function(relation) {
    if (relation.type === 'hasOne') {
      _entity[relation.entity_name].hasOne(relation.relation_name, _entity[relation.related_entity], {
        autoFetch: true
      });
    }
    if (relation.type === 'hasMany') {
      return _entity[relation.entity_name].hasMany(relation.relation_name, _entity[relation.related_entity], relation.relation_column, {
        autoFetch: true
      });
    }
  };

  sync = function(entity) {
    return _entity[entity].sync();
  };

  insert_entity = function(entity_name, values_obj) {
    var instance;
    instance = new _entity[entity_name](values_obj);
    return instance.save();
  };

  set_up_db = function(entities_schema, entities) {
    return creation_promise = create_db_tables(entities_schema).then(function(db) {
      var entity_name, values, values_obj, _results;
      _results = [];
      for (entity_name in entities) {
        values_obj = entities[entity_name];
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = values_obj.length; _i < _len; _i++) {
            values = values_obj[_i];
            _results1.push(insert_entity(entity_name, values));
          }
          return _results1;
        })());
      }
      return _results;
    });
  };

  clean_up_db = function() {
    var drop_callback, tables;
    tables = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    drop_callback = function(err, result) {
      if (err) {
        console.log(err);
      }
    };
    return Q.when(creation_promise, function() {
      return pg_gateway.open(db_config.test).then(function(client) {
        var table, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tables.length; _i < _len; _i++) {
          table = tables[_i];
          _results.push(client.query("drop table if exists " + table + " cascade;", drop_callback));
        }
        return _results;
      });
    });
  };

  module.exports = {
    set_up_db: set_up_db,
    clean_up_db: clean_up_db
  };

}).call(this);
